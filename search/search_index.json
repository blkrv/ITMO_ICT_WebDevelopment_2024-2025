{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Web-\u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435","text":""},{"location":"#k3340","title":"\u0411\u0430\u043b\u0430\u043a\u0438\u0440\u0435\u0432 \u0414\u0430\u043d\u0438\u0438\u043b K3340","text":""},{"location":"lab2/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 2","text":""},{"location":"lab2/#_1","title":"\u0421\u043f\u0438\u0441\u043e\u043a \u043e\u0442\u0435\u043b\u0435\u0439","text":""},{"location":"lab2/#_2","title":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0443\u0447\u0438\u0442\u044b\u0432\u0430\u0442\u044c \u043d\u0430\u0437\u0432\u0430\u043d\u0438\u0435 \u043e\u0442\u0435\u043b\u044f, \u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430 \u043e\u0442\u0435\u043b\u044f, \u0430\u0434\u0440\u0435\u0441, \u043e\u043f\u0438\u0441\u0430\u043d\u0438\u0435, \u0442\u0438\u043f\u044b \u043d\u043e\u043c\u0435\u0440\u043e\u0432, \u0441\u0442\u043e\u0438\u043c\u043e\u0441\u0442\u044c, \u0432\u043c\u0435\u0441\u0442\u0438\u043c\u043e\u0441\u0442\u044c, \u0443\u0434\u043e\u0431\u0441\u0442\u0432\u0430.","text":""},{"location":"lab2/#_3","title":"\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0439 \u0444\u0443\u043d\u043a\u0446\u0438\u043e\u043d\u0430\u043b:","text":"<p>\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043d\u043e\u0432\u044b\u0445 \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u0435\u0439.</p> <p>\u041f\u0440\u043e\u0441\u043c\u043e\u0442\u0440 \u0438 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u043d\u043e\u043c\u0435\u0440\u043e\u0432. </p> <p>\u041f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0440\u0435\u0434\u0430\u043a\u0442\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f \u0438 \u0443\u0434\u0430\u043b\u0435\u043d\u0438\u044f \u0441\u0432\u043e\u0438\u0445 \u0440\u0435\u0437\u0435\u0440\u0432\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0439.</p> <p>\u041d\u0430\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u043e\u0442\u0437\u044b\u0432\u043e\u0432 \u043a \u043d\u043e\u043c\u0435\u0440\u0430\u043c. \u041f\u0440\u0438 \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d\u0438\u0438 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u0435\u0432, \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u043e\u0445\u0440\u0430\u043d\u044f\u0442\u044c\u0441\u044f \u043f\u0435\u0440\u0438\u043e\u0434 \u043f\u0440\u043e\u0436\u0438\u0432\u0430\u043d\u0438\u044f, \u0442\u0435\u043a\u0441\u0442 \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0440\u0438\u044f, \u0440\u0435\u0439\u0442\u0438\u043d\u0433 (1-10), \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044f \u043e \u043a\u043e\u043c\u043c\u0435\u043d\u0442\u0430\u0442\u043e\u0440\u0435.</p> <p>\u0410\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440 \u0434\u043e\u043b\u0436\u0435\u043d \u0438\u043c\u0435\u0442\u044c \u0432\u043e\u0437\u043c\u043e\u0436\u043d\u043e\u0441\u0442\u044c \u0437\u0430\u0441\u0435\u043b\u0438\u0442\u044c \u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044f \u0432 \u043e\u0442\u0435\u043b\u044c \u0438 \u0432\u044b\u0441\u0435\u043b\u0438\u0442\u044c \u0438\u0437 \u043e\u0442\u0435\u043b\u044f \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Django-admin.</p> <p>\u0412 \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0434\u043e\u043b\u0436\u043d\u0430 \u0444\u043e\u0440\u043c\u0438\u0440\u043e\u0432\u0430\u0442\u044c\u0441\u044f \u0442\u0430\u0431\u043b\u0438\u0446\u0430, \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0430\u044e\u0449\u0430\u044f \u043f\u043e\u0441\u0442\u043e\u044f\u043b\u044c\u0446\u0435\u0432 \u043e\u0442\u0435\u043b\u044f \u0437\u0430 \u043f\u043e\u0441\u043b\u0435\u0434\u043d\u0438\u0439 \u043c\u0435\u0441\u044f\u0446.</p>"},{"location":"lab2/#_4","title":"\u041c\u043e\u0434\u0435\u043b\u0438","text":"<pre><code>class User(AbstractUser):\n    pass\n\nclass Hotel(models.Model):\n    name = models.CharField(max_length=100)\n    owner = models.CharField(max_length=100)\n    address = models.CharField(max_length=100)\n    description = models.TextField()\n\n\nclass RoomType(models.Model):\n    name = models.CharField(max_length=100)\n\n\nclass Room(models.Model):\n    hotel = models.ForeignKey(Hotel, on_delete=models.CASCADE)\n    room_type = models.ForeignKey(RoomType, on_delete=models.CASCADE)\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n    capacity = models.IntegerField()\n    amenities = models.TextField()\n\n\nclass Booking(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE)\n    room = models.ForeignKey(Room, on_delete=models.CASCADE)\n    check_in_date = models.DateField()\n    check_out_date = models.DateField()\n\n\nclass Review(models.Model):\n    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True)\n    room = models.ForeignKey(Room, on_delete=models.CASCADE)\n    start_date = models.DateField()\n    end_date = models.DateField()\n    text = models.TextField()\n    rating = models.IntegerField()\n</code></pre>"},{"location":"lab2/#_5","title":"\u041f\u0440\u0435\u0434\u0441\u0442\u0430\u0432\u043b\u0435\u043d\u0438\u044f","text":""},{"location":"lab2/#userregistrationview","title":"UserRegistrationView","text":"<pre><code>class UserRegistrationView(TemplateView):\n    template_name = 'register.html'\n\n    def get(self, request):\n        form = RegistrationForm()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request):\n        form = RegistrationForm(request.POST)\n        if form.is_valid():\n            user = form.save()\n            login(request, user)\n            messages.success(request, '\u0420\u0435\u0433\u0438\u0441\u0442\u0440\u0430\u0446\u0438\u044f \u043f\u0440\u043e\u0448\u043b\u0430 \u0443\u0441\u043f\u0435\u0448\u043d\u043e!')\n            return redirect('home')\n        return render(request, self.template_name, {'form': form})\n</code></pre>"},{"location":"lab2/#loginview","title":"LoginView","text":"<pre><code>class LoginView(TemplateView):\n    template_name = 'login.html'\n\n    def get(self, request):\n        form = LoginForm()\n        return render(request, self.template_name, {'form': form})\n\n    def post(self, request):\n        form = LoginForm(request, data=request.POST)\n        if form.is_valid():\n            user = authenticate(username=form.cleaned_data.get('username'), password=form.cleaned_data.get('password'))\n            if user is not None:\n               login(request, user)\n               messages.success(request, '\u0412\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0432\u043e\u0448\u043b\u0438!')\n               return redirect('home')\n        return render(request, self.template_name, {'form': form})\n</code></pre>"},{"location":"lab2/#logoutview","title":"LogoutView","text":"<pre><code>class LogoutView(View):\n    def get(self, request):\n        logout(request)\n        messages.success(request, '\u0412\u044b \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0432\u044b\u0448\u043b\u0438!')\n        return HttpResponseRedirect(reverse_lazy('home'))\n</code></pre>"},{"location":"lab2/#hotellistview","title":"HotelListView","text":"<pre><code>class HotelListView(ListView):\n    model = Hotel\n    template_name = 'hotel_list.html'\n    context_object_name = 'hotels'\n    paginate_by = 3\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        hotels = self.get_queryset()\n        paginator = Paginator(hotels, self.paginate_by)\n        page = self.request.GET.get('page')\n        try:\n            hotels_page = paginator.page(page)\n        except PageNotAnInteger:\n            hotels_page = paginator.page(1)\n        except EmptyPage:\n            hotels_page = paginator.page(paginator.num_pages)\n\n        context['hotels'] = hotels_page\n        return context\n</code></pre>"},{"location":"lab2/#roomlistview","title":"RoomListView","text":"<pre><code>class RoomListView(ListView):\n    model = Room\n    template_name = 'room_list.html'\n    context_object_name = 'rooms'\n\n    def get_queryset(self):\n        hotel_id = self.kwargs.get('hotel_id')\n        return Room.objects.filter(hotel_id=hotel_id)\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['hotel'] = get_object_or_404(Hotel, pk=self.kwargs.get('hotel_id'))\n        return context\n</code></pre>"},{"location":"lab2/#roomdetailview","title":"RoomDetailView","text":"<pre><code>class RoomDetailView(DetailView):\n    model = Room\n    template_name = 'room_detail.html'\n    context_object_name = 'room'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['booking_form'] = BookingForm()\n        context['review_form'] = ReviewForm()\n        context['bookings'] = Booking.objects.filter(room=self.object, user=self.request.user)\n        context['reviews'] = Review.objects.filter(room=self.object)\n        return context\n</code></pre>"},{"location":"lab2/#bookingcreateview","title":"BookingCreateView","text":"<pre><code>class BookingCreateView(LoginRequiredMixin, View):\n    def post(self, request, room_id):\n        room = get_object_or_404(Room, pk=room_id)\n        form = BookingForm(request.POST)\n        if form.is_valid():\n            booking = form.save(commit=False)\n            booking.room = room\n            booking.user = request.user\n            booking.save()\n            messages.success(request, '\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u0435 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0441\u043e\u0445\u0440\u0430\u043d\u0435\u043d\u043e!')\n            return redirect(reverse_lazy('room_detail', kwargs={'pk': room_id}))\n        return render(request, 'room_detail.html', {'room': room, 'booking_form': form})\n</code></pre>"},{"location":"lab2/#bookingupdateview","title":"BookingUpdateView","text":"<pre><code>class BookingUpdateView(LoginRequiredMixin, UpdateView):\n    model = Booking\n    form_class = BookingForm\n    template_name = 'booking_update.html'\n    context_object_name = 'booking'\n\n    def get_success_url(self):\n        return reverse_lazy('room_detail', kwargs={'pk': self.object.room.id})\n\n    def get_queryset(self):\n        return Booking.objects.filter(user=self.request.user)\n</code></pre>"},{"location":"lab2/#bookingdeleteview","title":"BookingDeleteView","text":"<pre><code>class BookingDeleteView(LoginRequiredMixin, DeleteView):\n    model = Booking\n    template_name = 'booking_delete.html'\n    context_object_name = 'booking'\n\n    def get_success_url(self):\n       return reverse_lazy('room_detail', kwargs={'pk': self.object.room.id})\n\n    def get_queryset(self):\n        return Booking.objects.filter(user=self.request.user)\n</code></pre>"},{"location":"lab2/#bookinglistview","title":"BookingListView","text":"<pre><code>class BookingListView(LoginRequiredMixin, ListView):\n    model = Booking\n    template_name = 'booking_list.html'\n    context_object_name = 'bookings'\n\n    def get_queryset(self):\n        return Booking.objects.filter(user=self.request.user).order_by('-check_in_date')\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        return context\n</code></pre>"},{"location":"lab2/#reviewcreateview","title":"ReviewCreateView","text":"<pre><code>class ReviewCreateView(LoginRequiredMixin, CreateView):\n    model = Review\n    form_class = ReviewForm\n    template_name = 'review_create.html'\n\n    def get_context_data(self, **kwargs):\n        context = super().get_context_data(**kwargs)\n        context['room'] = get_object_or_404(Room, pk=self.kwargs['room_id'])\n        return context\n\n    def get_success_url(self):\n        return reverse_lazy('room_detail', kwargs={'pk': self.kwargs['room_id']})\n\n    def form_valid(self, form):\n        review = form.save(commit=False)\n        review.user = self.request.user\n        review.room = get_object_or_404(Room, pk=self.kwargs['room_id'])\n        review.save()\n        messages.success(self.request, '\u041e\u0442\u0437\u044b\u0432 \u0443\u0441\u043f\u0435\u0448\u043d\u043e \u0434\u043e\u0431\u0430\u0432\u043b\u0435\u043d!')\n        return super().form_valid(form)\n</code></pre>"},{"location":"lab2/#monthlyguestlistview","title":"MonthlyGuestListView","text":"<pre><code>class MonthlyGuestListView(LoginRequiredMixin, ListView):\n    model = Booking\n    template_name = 'monthly_guests.html'\n    context_object_name = 'bookings'\n\n    def get_queryset(self):\n        today = timezone.now().date()\n        last_month = today - timedelta(days=30)\n        return Booking.objects.filter(check_in_date__gte=last_month).order_by('-check_in_date')\n</code></pre>"},{"location":"lab2/#_6","title":"\u041f\u0443\u0442\u0438","text":"<pre><code>urlpatterns = [\n    path('', views.HomeView.as_view(), name='home'),\n    path('register/', views.UserRegistrationView.as_view(), name='register'),\n    path('login/', views.LoginView.as_view(), name='login'),\n    path('logout/', views.LogoutView.as_view(), name='logout'),\n    path('hotels/', views.HotelListView.as_view(), name='hotel_list'),\n    path('hotel/&lt;int:hotel_id&gt;/rooms/', views.RoomListView.as_view(), name='room_list'),\n    path('room/&lt;int:pk&gt;/', views.RoomDetailView.as_view(), name='room_detail'),\n    path('room/&lt;int:room_id&gt;/booking/', views.BookingCreateView.as_view(), name='booking_create'),\n    path('booking/&lt;int:pk&gt;/update/', views.BookingUpdateView.as_view(), name='booking_update'),\n    path('booking/&lt;int:pk&gt;/delete/', views.BookingDeleteView.as_view(), name='booking_delete'),\n    path('room/&lt;int:room_id&gt;/review/', views.ReviewCreateView.as_view(), name='review_create'),\n    path('bookings/', views.BookingListView.as_view(), name='bookings_list'),\n    path('monthly-guests/', views.MonthlyGuestListView.as_view(), name='monthly_guests'),\n]\n</code></pre>"},{"location":"lab3/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3","text":""},{"location":"lab3/#_1","title":"\u0421\u043e\u0437\u0434\u0430\u0442\u044c \u043f\u0440\u043e\u0433\u0440\u0430\u043c\u043c\u043d\u0443\u044e \u0441\u0438\u0441\u0442\u0435\u043c\u0443, \u043f\u0440\u0435\u0434\u043d\u0430\u0437\u043d\u0430\u0447\u0435\u043d\u043d\u0443\u044e \u0434\u043b\u044f \u0430\u0434\u043c\u0438\u043d\u0438\u0441\u0442\u0440\u0430\u0442\u043e\u0440\u0430 \u0433\u043e\u0441\u0442\u0438\u043d\u0438\u0446\u044b.","text":""},{"location":"lab3/#modelspy","title":"models.py","text":"<pre><code>from django.db import models\n\nclass Client(models.Model):\n    passport_number = models.CharField(max_length=20, unique=True)\n    last_name = models.CharField(max_length=100)\n    first_name = models.CharField(max_length=100)\n    middle_name = models.CharField(max_length=100, blank=True, null=True)\n    city = models.CharField(max_length=100)\n\n    def __str__(self):\n        return f\"{self.first_name} {self.last_name}\"\n\nclass RoomType(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    description = models.TextField(blank=True, null=True)\n    capacity = models.IntegerField()\n\n    def __str__(self):\n        return self.name\n\nclass Room(models.Model):\n    room_number = models.CharField(max_length=20, unique=True)\n    room_type = models.ForeignKey(RoomType, on_delete=models.CASCADE)\n    cleaning_status = models.CharField(max_length=50, default=\"Clean\")\n    is_occupied = models.BooleanField(default=False)\n    phone_number = models.CharField(max_length=20, blank=True, null=True)\n\n    def __str__(self):\n        return f\"Room {self.room_number} ({self.room_type.name})\"\n\n\nclass RoomPrice(models.Model):\n    room_type = models.ForeignKey(RoomType, on_delete=models.CASCADE)\n    start_date = models.DateField()\n    end_date = models.DateField()\n    price = models.DecimalField(max_digits=10, decimal_places=2)\n\n    class Meta:\n        unique_together = ('room_type','start_date', 'end_date')\n\n    def __str__(self):\n      return f\"Price for {self.room_type.name} from {self.start_date} to {self.end_date}: {self.price}\"\n\n\nclass Booking(models.Model):\n    client = models.ForeignKey(Client, on_delete=models.CASCADE)\n    check_in_date = models.DateField()\n    check_out_date = models.DateField()\n    room = models.ForeignKey(Room, on_delete=models.CASCADE)\n    booking_date = models.DateField(auto_now_add=True)\n    booking_status = models.CharField(max_length=50, default=\"Booked\")\n    payment_status = models.CharField(max_length=50, default=\"Pending\")\n\n    def __str__(self):\n        return f\"Booking for {self.client} in {self.room} on {self.booking_date}\"\n\n\nclass JobTitle(models.Model):\n    name = models.CharField(max_length=100, unique=True)\n    salary = models.DecimalField(max_digits=10, decimal_places=2)\n\n    def __str__(self):\n        return self.name\n\nclass Employee(models.Model):\n    last_name = models.CharField(max_length=100)\n    first_name = models.CharField(max_length=100)\n    middle_name = models.CharField(max_length=100, blank=True, null=True)\n    passport_number = models.CharField(max_length=20, unique=True)\n    def __str__(self):\n        return f\"{self.first_name} {self.last_name}\"\n\nclass EmploymentContract(models.Model):\n    employee = models.ForeignKey(Employee, on_delete=models.CASCADE)\n    job_title = models.ForeignKey(JobTitle, on_delete=models.CASCADE)\n    contract_type = models.CharField(max_length=50)\n    start_date = models.DateField()\n    end_date = models.DateField(blank=True, null=True)\n\n    def __str__(self):\n        return f\"Contract for {self.employee} as {self.job_title}\"\n\n\nclass CleaningSchedule(models.Model):\n    cleaning_date = models.DateField()\n    room = models.ForeignKey(Room, on_delete=models.CASCADE)\n    status = models.CharField(max_length=50, default=\"Scheduled\")\n    cleaner = models.ForeignKey(Employee, on_delete=models.CASCADE)\n\n    def __str__(self):\n        return f\"Cleaning schedule for {self.room} on {self.cleaning_date}\"\n</code></pre>"},{"location":"lab3/#serializerspy","title":"serializers.py","text":"<pre><code>from rest_framework import serializers\nfrom .models import Client, RoomType, Room, RoomPrice, Booking, JobTitle, Employee, EmploymentContract, CleaningSchedule\n\nclass ClientSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Client\n        fields = '__all__'\n\nclass RoomTypeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = RoomType\n        fields = '__all__'\n\nclass RoomSerializer(serializers.ModelSerializer):\n    room_type = serializers.PrimaryKeyRelatedField(queryset=RoomType.objects.all())\n\n    class Meta:\n        model = Room\n        fields = '__all__'\n\nclass RoomPriceSerializer(serializers.ModelSerializer):\n    room_type = RoomTypeSerializer()\n\n    class Meta:\n        model = RoomPrice\n        fields = '__all__'\n\nclass BookingSerializer(serializers.ModelSerializer):\n    client = serializers.PrimaryKeyRelatedField(queryset=Client.objects.all())\n    room = serializers.PrimaryKeyRelatedField(queryset=Room.objects.all())\n\n    class Meta:\n        model = Booking\n        fields = '__all__'\n\n\nclass JobTitleSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = JobTitle\n        fields = '__all__'\n\nclass EmployeeSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Employee\n        fields = '__all__'\n\nclass EmploymentContractSerializer(serializers.ModelSerializer):\n    employee = EmployeeSerializer()\n    job_title = JobTitleSerializer()\n\n    class Meta:\n        model = EmploymentContract\n        fields = '__all__'\n\nclass CleaningScheduleSerializer(serializers.ModelSerializer):\n    room = serializers.PrimaryKeyRelatedField(queryset=Room.objects.all())\n    cleaner = serializers.PrimaryKeyRelatedField(queryset=Employee.objects.all())\n\n    class Meta:\n        model = CleaningSchedule\n        fields = '__all__'\n</code></pre>"},{"location":"lab3/#viewspy","title":"views.py","text":"<pre><code>from rest_framework import viewsets\nfrom .models import Client, RoomType, Room, RoomPrice, Booking, JobTitle, Employee, EmploymentContract, CleaningSchedule\nfrom .serializers import (\n    ClientSerializer,\n    RoomTypeSerializer,\n    RoomSerializer,\n    RoomPriceSerializer,\n    BookingSerializer,\n    JobTitleSerializer,\n    EmployeeSerializer,\n    EmploymentContractSerializer,\n    CleaningScheduleSerializer\n)\n\nclass ClientViewSet(viewsets.ModelViewSet):\n    queryset = Client.objects.all()\n    serializer_class = ClientSerializer\n\nclass RoomTypeViewSet(viewsets.ModelViewSet):\n    queryset = RoomType.objects.all()\n    serializer_class = RoomTypeSerializer\n\nclass RoomViewSet(viewsets.ModelViewSet):\n    queryset = Room.objects.all()\n    serializer_class = RoomSerializer\n\nclass RoomPriceViewSet(viewsets.ModelViewSet):\n    queryset = RoomPrice.objects.all()\n    serializer_class = RoomPriceSerializer\n\nclass BookingViewSet(viewsets.ModelViewSet):\n    queryset = Booking.objects.all()\n    serializer_class = BookingSerializer\n\nclass JobTitleViewSet(viewsets.ModelViewSet):\n    queryset = JobTitle.objects.all()\n    serializer_class = JobTitleSerializer\n\nclass EmployeeViewSet(viewsets.ModelViewSet):\n    queryset = Employee.objects.all()\n    serializer_class = EmployeeSerializer\n\nclass EmploymentContractViewSet(viewsets.ModelViewSet):\n    queryset = EmploymentContract.objects.all()\n    serializer_class = EmploymentContractSerializer\n\nclass CleaningScheduleViewSet(viewsets.ModelViewSet):\n    queryset = CleaningSchedule.objects.all()\n    serializer_class = CleaningScheduleSerializer\n</code></pre>"},{"location":"lab3/#urlspy","title":"urls.py","text":"<pre><code>from django.urls import path, include\nfrom rest_framework import routers\nfrom . import views\n\nrouter = routers.DefaultRouter()\nrouter.register(r'clients', views.ClientViewSet)\nrouter.register(r'room-types', views.RoomTypeViewSet)\nrouter.register(r'rooms', views.RoomViewSet)\nrouter.register(r'room-prices', views.RoomPriceViewSet)\nrouter.register(r'bookings', views.BookingViewSet)\nrouter.register(r'job-titles', views.JobTitleViewSet)\nrouter.register(r'employees', views.EmployeeViewSet)\nrouter.register(r'employment-contracts', views.EmploymentContractViewSet)\nrouter.register(r'cleaning-schedules', views.CleaningScheduleViewSet)\n\nurlpatterns = [\n    path('', include(router.urls)),\n]\n</code></pre>"},{"location":"lab4/","title":"\u041b\u0430\u0431\u043e\u0440\u0430\u0442\u043e\u0440\u043d\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 4","text":""},{"location":"lab4/#vuejs","title":"\u0420\u0435\u0430\u043b\u0438\u0437\u0430\u0446\u0438\u044f \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u043e\u0439 \u0447\u0430\u0441\u0442\u0438 \u0441\u0440\u0435\u0434\u0441\u0442\u0432\u0430\u043c\u0438 Vue.js.","text":""},{"location":"lab4/#_1","title":"\u0421\u0442\u0440\u0430\u043d\u0438\u0446\u0430 \u0432\u0445\u043e\u0434\u0430","text":""},{"location":"lab4/#_2","title":"\u041a\u043e\u043c\u043d\u0430\u0442\u044b","text":""},{"location":"lab4/#_3","title":"\u041a\u043b\u0438\u0435\u043d\u0442\u044b","text":""},{"location":"lab4/#_4","title":"\u0411\u0440\u043e\u043d\u0438\u0440\u043e\u0432\u0430\u043d\u0438\u044f","text":""},{"location":"lab4/#_5","title":"\u0420\u0430\u0441\u043f\u0438\u0441\u0430\u043d\u0438\u0435 \u0443\u0431\u043e\u0440\u043a\u0438","text":""},{"location":"lab4/#_6","title":"\u0421\u043e\u0442\u0440\u0443\u0434\u043d\u0438\u043a\u0438","text":""},{"location":"practical3_1/","title":"\u041f\u0440\u0430\u043a\u0442\u0438\u0447\u0435\u0441\u043a\u0430\u044f \u0440\u0430\u0431\u043e\u0442\u0430 3.1","text":""},{"location":"practical3_1/#_1","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u041d\u0430\u043f\u0438\u0448\u0438\u0442\u0435 \u0437\u0430\u043f\u0440\u043e\u0441 \u043d\u0430 \u0441\u043e\u0437\u0434\u0430\u043d\u0438\u0435 6-7 \u043d\u043e\u0432\u044b\u0445 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0435\u0432 \u0438 5-6 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439, \u043a\u0430\u0436\u0434\u043e\u043c\u0443 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0443 \u043d\u0430\u0437\u043d\u0430\u0447\u044c\u0442\u0435 \u0443\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u0435 \u0438 \u043e\u0442 1 \u0434\u043e 3 \u0430\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0435\u0439. \u0417\u0430\u0434\u0430\u043d\u0438\u0435 \u043c\u043e\u0436\u0435\u0442\u0435 \u0432\u044b\u043f\u043e\u043b\u043d\u0438\u0442\u044c \u043b\u0438\u0431\u043e \u0432 \u0438\u043d\u0442\u0435\u0440\u0430\u043a\u0442\u0438\u0432\u043d\u043e\u043c \u0440\u0435\u0436\u0438\u043c\u0435 \u0438\u043d\u0442\u0435\u0440\u043f\u0440\u0435\u0442\u0430\u0442\u043e\u0440\u0430, \u043b\u0438\u0431\u043e \u0432 \u043e\u0442\u0434\u0435\u043b\u044c\u043d\u043e\u043c python-\u0444\u0430\u0439\u043b\u0435. \u0420\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442\u043e\u043c \u0434\u043e\u043b\u0436\u043d\u044b \u0441\u0442\u0430\u0442\u044c \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u0438 \u043e\u0442\u043e\u0431\u0440\u0430\u0436\u0435\u043d\u0438\u0435 \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u0445 \u043e\u0431\u044a\u0435\u043a\u0442\u043e\u0432.</p>"},{"location":"practical3_1/#_2","title":"\u0410\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u044b","text":""},{"location":"practical3_1/#_3","title":"\u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438","text":""},{"location":"practical3_1/#_4","title":"\u0423\u0434\u043e\u0441\u0442\u043e\u0432\u0435\u0440\u0435\u043d\u0438\u044f","text":""},{"location":"practical3_1/#_5","title":"\u0410\u0432\u0442\u043e\u043c\u043e\u0431\u0438\u043b\u0438 \u0430\u0432\u0442\u043e\u0432\u043b\u0430\u0434\u0435\u043b\u044c\u0446\u0430\u043c","text":""},{"location":"practical3_1/#2","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f 2","text":"<p>\u041f\u043e \u0441\u043e\u0437\u0434\u0430\u043d\u043d\u044b\u043c \u0432 \u043f\u0440.1 \u0434\u0430\u043d\u043d\u044b\u043c \u043d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b \u043d\u0430 \u0444\u0438\u043b\u044c\u0442\u0440\u0430\u0446\u0438\u044e.</p>"},{"location":"practical3_1/#_6","title":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b","text":""},{"location":"practical3_1/#3","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f 3","text":"<p>\u041d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0440\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u043b\u0435\u0434\u0443\u044e\u0449\u0438\u0435 \u0437\u0430\u043f\u0440\u043e\u0441\u044b c \u043f\u0440\u0438\u043c\u0435\u043d\u0435\u043d\u0438\u0435\u043c \u043e\u043f\u0438\u0441\u0430\u043d\u043d\u044b\u0445 \u043c\u0435\u0442\u043e\u0434\u043e\u0432.</p>"},{"location":"practical3_1/#_7","title":"\u0417\u0430\u043f\u0440\u043e\u0441\u044b","text":""},{"location":"lab1/task1/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 1","text":""},{"location":"lab1/task1/#_1","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, server\u00bb, \u0438 \u043e\u043d\u043e \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u043d\u0430 \u0441\u0442\u043e\u0440\u043e\u043d\u0435 \u0441\u0435\u0440\u0432\u0435\u0440\u0430. \u0412 \u043e\u0442\u0432\u0435\u0442 \u0441\u0435\u0440\u0432\u0435\u0440 \u043e\u0442\u043f\u0440\u0430\u0432\u043b\u044f\u0435\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443 \u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435 \u00abHello, client\u00bb, \u043a\u043e\u0442\u043e\u0440\u043e\u0435 \u0434\u043e\u043b\u0436\u043d\u043e \u043e\u0442\u043e\u0431\u0440\u0430\u0437\u0438\u0442\u044c\u0441\u044f \u0443 \u043a\u043b\u0438\u0435\u043d\u0442\u0430.</p>"},{"location":"lab1/task1/#_2","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"<ul> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>socket</code>.</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 UDP.</li> </ul>"},{"location":"lab1/task1/#_3","title":"\u041a\u043e\u0434","text":""},{"location":"lab1/task1/#clientpy","title":"client.py","text":"<pre><code>import socket\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nserver_address = ('localhost', 1234)\n\nmessage = 'Hello server'\nclient.sendto(message.encode(), server_address)\n\ndata, server = client.recvfrom(1024)\nprint(f'\u041e\u0442\u0432\u0435\u0442 \u043e\u0442 \u0441\u0435\u0440\u0432\u0435\u0440\u0430: {data.decode()}')\n\nclient.close()\n</code></pre>"},{"location":"lab1/task1/#serverpy","title":"server.py","text":"<pre><code>import socket\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)\nserver.bind(('localhost', 1234))\nprint(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d, \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f...\")\n\nconn, addr = server.recvfrom(1024)\nrequest = conn.decode()\nprint(f'\u0417\u0430\u043f\u0440\u043e\u0441 \u043e\u0442 {addr}: {request}')\n\nresponse = 'Hello client'\nserver.sendto(response.encode(), addr)\n\nserver.close()\n</code></pre>"},{"location":"lab1/task2/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 2","text":""},{"location":"lab1/task2/#_1","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u043a\u043b\u0438\u0435\u043d\u0442\u0441\u043a\u0443\u044e \u0438 \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u0437\u0430\u043f\u0440\u0430\u0448\u0438\u0432\u0430\u0435\u0442 \u0432\u044b\u043f\u043e\u043b\u043d\u0435\u043d\u0438\u0435 \u043c\u0430\u0442\u0435\u043c\u0430\u0442\u0438\u0447\u0435\u0441\u043a\u043e\u0439 \u043e\u043f\u0435\u0440\u0430\u0446\u0438\u0438 - \u0442\u0435\u043e\u0440\u0435\u043c\u044b \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430, \u043f\u0430\u0440\u0430\u043c\u0435\u0442\u0440\u044b \u043a\u043e\u0442\u043e\u0440\u043e\u0439 \u0432\u0432\u043e\u0434\u044f\u0442\u0441\u044f \u0441 \u043a\u043b\u0430\u0432\u0438\u0430\u0442\u0443\u0440\u044b. \u0421\u0435\u0440\u0432\u0435\u0440 \u043e\u0431\u0440\u0430\u0431\u0430\u0442\u044b\u0432\u0430\u0435\u0442 \u0434\u0430\u043d\u043d\u044b\u0435 \u0438 \u0432\u043e\u0437\u0432\u0440\u0430\u0449\u0430\u0435\u0442 \u0440\u0435\u0437\u0443\u043b\u044c\u0442\u0430\u0442 \u043a\u043b\u0438\u0435\u043d\u0442\u0443.</p>"},{"location":"lab1/task2/#_2","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"<ul> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>socket</code>.</li> <li>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u043f\u0440\u043e\u0442\u043e\u043a\u043e\u043b\u0430 TCP.</li> </ul>"},{"location":"lab1/task2/#_3","title":"\u041a\u043e\u0434","text":""},{"location":"lab1/task2/#clientpy","title":"client.py","text":"<pre><code>import socket\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect(('localhost', 1234))\n\ndata = client.recv(1024)\nprint(data.decode())\n\nuser = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0442\u043e\u0440\u043e\u043d\u044b a \u0438 b \u0447\u0435\u0440\u0435\u0437 \u043f\u0440\u043e\u0431\u0435\u043b: \")\nclient.send(user.encode())\n\nresponse = client.recv(1024)\nprint(response.decode())\n\nclient.close()\n</code></pre>"},{"location":"lab1/task2/#serverpy","title":"server.py","text":"<pre><code>import socket\n\ndef pifagor(a: int, b: int) -&gt; float:\n    return round((a**2 + b**2) ** (1/2))\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind(('localhost', 1234))\nserver.listen(1)\nprint(\"\u0421\u0435\u0440\u0432\u0435\u0440 \u0437\u0430\u043f\u0443\u0449\u0435\u043d, \u043e\u0436\u0438\u0434\u0430\u0435\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u044f...\")\n\nconn, addr = server.accept()\nprint(f\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u0438\u0435 \u043e\u0442 {addr}\")\nconn.send(\"\u0422\u0435\u043e\u0440\u0435\u043c\u0430 \u041f\u0438\u0444\u0430\u0433\u043e\u0440\u0430\".encode())\n\ndata = conn.recv(1024)\nif data:\n    a, b = map(int, data.decode().split())\n    result = pifagor(a, b)\n    conn.send(f'\u0413\u0438\u043f\u043e\u0442\u0435\u043d\u0443\u0437\u0430: {result}'.encode())\n\nconn.close()\n</code></pre>"},{"location":"lab1/task3/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 3","text":""},{"location":"lab1/task3/#_1","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0441\u0435\u0440\u0432\u0435\u0440\u043d\u0443\u044e \u0447\u0430\u0441\u0442\u044c \u043f\u0440\u0438\u043b\u043e\u0436\u0435\u043d\u0438\u044f. \u041a\u043b\u0438\u0435\u043d\u0442 \u043f\u043e\u0434\u043a\u043b\u044e\u0447\u0430\u0435\u0442\u0441\u044f \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443, \u0438 \u0432 \u043e\u0442\u0432\u0435\u0442 \u043f\u043e\u043b\u0443\u0447\u0430\u0435\u0442 HTTP-\u0441\u043e\u043e\u0431\u0449\u0435\u043d\u0438\u0435, \u0441\u043e\u0434\u0435\u0440\u0436\u0430\u0449\u0435\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u0443, \u043a\u043e\u0442\u043e\u0440\u0430\u044f \u0441\u0435\u0440\u0432\u0435\u0440 \u043f\u043e\u0434\u0433\u0440\u0443\u0436\u0430\u0435\u0442 \u0438\u0437 \u0444\u0430\u0439\u043b\u0430 index.html.</p>"},{"location":"lab1/task3/#_2","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"<ul> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>socket</code>.</li> </ul>"},{"location":"lab1/task3/#_3","title":"\u041a\u043e\u0434","text":""},{"location":"lab1/task3/#indexhtml","title":"index.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;qweqwewqewqewqewqeqw&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab1/task3/#clientpy","title":"client.py","text":"<pre><code>import socket\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect(('localhost', 1234))\n\nresponse = client.recv(1024)\nprint(response.decode())\n\nclient.close()\n</code></pre>"},{"location":"lab1/task3/#serverpy","title":"server.py","text":"<pre><code>import socket\n\ndef read_html():\n    with open('index.html', 'r') as file:\n        return file.read()\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind(('localhost', 1234))\nserver.listen(1)\n\nconn, addr = server.accept()\nhtml_content = read_html()\n\nresponse = f\"\"\"HTTP/1.1 200 OK\nContent-type: text/html\n{html_content}\n\"\"\"\n\nconn.send(response.encode())\nconn.close()\n</code></pre>"},{"location":"lab1/task4/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 4","text":""},{"location":"lab1/task4/#_1","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u0420\u0435\u0430\u043b\u0438\u0437\u043e\u0432\u0430\u0442\u044c \u0434\u0432\u0443\u0445\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0438\u043b\u0438 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442. \u0414\u043b\u044f \u043c\u0430\u043a\u0441\u0438\u043c\u0430\u043b\u044c\u043d\u043e\u0433\u043e \u043a\u043e\u043b\u0438\u0447\u0435\u0441\u0442\u0432\u0430 \u0431\u0430\u043b\u043b\u043e\u0432 \u0440\u0435\u0430\u043b\u0438\u0437\u0443\u0439\u0442\u0435 \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u0438\u0439 \u0447\u0430\u0442.</p>"},{"location":"lab1/task4/#_2","title":"\u0422\u0440\u0435\u0431\u043e\u0432\u0430\u043d\u0438\u044f","text":"<ul> <li>\u041e\u0431\u044f\u0437\u0430\u0442\u0435\u043b\u044c\u043d\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>socket</code>.</li> <li>\u0414\u043b\u044f \u043c\u043d\u043e\u0433\u043e\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u0435\u043b\u044c\u0441\u043a\u043e\u0433\u043e \u0447\u0430\u0442\u0430 \u043d\u0435\u043e\u0431\u0445\u043e\u0434\u0438\u043c\u043e \u0438\u0441\u043f\u043e\u043b\u044c\u0437\u043e\u0432\u0430\u0442\u044c \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0443 <code>threading</code>.</li> </ul>"},{"location":"lab1/task4/#_3","title":"\u041a\u043e\u0434","text":""},{"location":"lab1/task4/#clientpy","title":"client.py","text":"<pre><code>import socket\nimport threading\n\nnickname = input(\"\u0412\u0432\u0435\u0434\u0438\u0442\u0435 \u0441\u0432\u043e\u0439 \u043d\u0438\u043a\u043d\u0435\u0439\u043c: \")\n\nclient = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nclient.connect(('127.0.0.1', 1111))\n\ndef receive():\n    while True:\n        try:\n            message = client.recv(1024).decode('utf-8')\n            if message == 'NICK':\n                client.send(nickname.encode('utf-8'))\n            else:\n                print(message)\n        except:\n            print(\"\u041f\u0440\u043e\u0438\u0437\u043e\u0448\u043b\u0430 \u043e\u0448\u0438\u0431\u043a\u0430!\")\n            client.close()\n            break\n\ndef write():\n    while True:\n        message = '{}: {}'.format(nickname, input(''))\n        client.send(message.encode('utf-8'))\n\nreceive_thread = threading.Thread(target=receive)\nreceive_thread.start()\n\nwrite_thread = threading.Thread(target=write)\nwrite_thread.start()\n</code></pre>"},{"location":"lab1/task4/#serverpy","title":"server.py","text":"<pre><code>import socket\nimport threading\n\nserver = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\nserver.bind(('localhost', 1111))\nserver.listen()\n\nclients = []\nnicknames = []\n\ndef broadcast(message):\n    for client in clients:\n        client.send(message)\n\ndef handle(client):\n    while True:\n        try:\n            message = client.recv(1024)\n            broadcast(message)\n        except:\n            index = clients.index(client)\n            clients.remove(client)\n            client.close()\n            nickname = nicknames[index]\n            broadcast('{} \u043f\u043e\u043a\u0438\u043d\u0443\u043b(\u0430) \u0447\u0430\u0442!'.format(nickname).encode('utf-8'))\n            nicknames.remove(nickname)\n            break\n\ndef receive():\n    while True:\n        client, address = server.accept()\n        print(\"\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0438\u043b\u0441\u044f {}\".format(str(address)))\n\n        client.send('NICK'.encode('utf-8'))\n        nickname = client.recv(1024).decode('utf-8')\n        nicknames.append(nickname)\n        clients.append(client)\n\n        print(\"\u041d\u0438\u043a\u043d\u0435\u0439\u043c: {}\".format(nickname))\n        broadcast(\"{} \u043f\u0440\u0438\u0441\u043e\u0435\u0434\u0438\u043d\u0438\u043b\u0441\u044f(\u0430\u0441\u044c)!\".format(nickname).encode('utf-8'))\n        client.send('\u041f\u043e\u0434\u043a\u043b\u044e\u0447\u0435\u043d\u043e \u043a \u0441\u0435\u0440\u0432\u0435\u0440\u0443!'.encode('utf-8'))\n\n        thread = threading.Thread(target=handle, args=(client,))\n        thread.start()\n\nreceive()\n</code></pre>"},{"location":"lab1/task5/","title":"\u0417\u0430\u0434\u0430\u043d\u0438\u0435 5","text":""},{"location":"lab1/task5/#_1","title":"\u0422\u0435\u043a\u0441\u0442 \u0437\u0430\u0434\u0430\u043d\u0438\u044f","text":"<p>\u041d\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u043f\u0440\u043e\u0441\u0442\u043e\u0439 \u0432\u0435\u0431-\u0441\u0435\u0440\u0432\u0435\u0440 \u0434\u043b\u044f \u043e\u0431\u0440\u0430\u0431\u043e\u0442\u043a\u0438 GET \u0438 POST HTTP-\u0437\u0430\u043f\u0440\u043e\u0441\u043e\u0432 \u0441 \u043f\u043e\u043c\u043e\u0449\u044c\u044e \u0431\u0438\u0431\u043b\u0438\u043e\u0442\u0435\u043a\u0438 socket \u0432 Python. \u0421\u0435\u0440\u0432\u0435\u0440 \u0434\u043e\u043b\u0436\u0435\u043d: \u041f\u0440\u0438\u043d\u044f\u0442\u044c \u0438 \u0437\u0430\u043f\u0438\u0441\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435 \u0438 \u043e\u0446\u0435\u043d\u043a\u0435 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0435. \u041e\u0442\u0434\u0430\u0442\u044c \u0438\u043d\u0444\u043e\u0440\u043c\u0430\u0446\u0438\u044e \u043e\u0431\u043e \u0432\u0441\u0435\u0445 \u043e\u0446\u0435\u043d\u043a\u0430\u0445 \u043f\u043e \u0434\u0438\u0441\u0446\u0438\u043f\u043b\u0438\u043d\u0430\u043c \u0432 \u0432\u0438\u0434\u0435 HTML-\u0441\u0442\u0440\u0430\u043d\u0438\u0446\u044b.</p>"},{"location":"lab1/task5/#_2","title":"\u041a\u043e\u0434","text":""},{"location":"lab1/task5/#indexhtml","title":"index.html","text":"<pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"ru\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;\u0416\u0443\u0440\u043d\u0430\u043b&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;\u0414\u043e\u0431\u0430\u0432\u0438\u0442\u044c \u043e\u0446\u0435\u043d\u043a\u0443&lt;/h1&gt;\n    &lt;form action=\"/\" method=\"post\"&gt;\n        &lt;label for=\"subject\"&gt;\u041f\u0440\u0435\u0434\u043c\u0435\u0442:&lt;/label&gt;\n        &lt;input type=\"text\" name=\"subject\" id=\"subject\"/&gt;\n        &lt;br&gt;\n        &lt;label for=\"grade\"&gt;\u041e\u0446\u0435\u043d\u043a\u0430:&lt;/label&gt;\n        &lt;input type=\"number\" name=\"grade\" id=\"grade\"/&gt;\n        &lt;br&gt;\n        &lt;button type=\"submit\"&gt;\u041e\u0431\u043d\u043e\u0432\u0438\u0442\u044c \u0436\u0443\u0440\u043d\u0430\u043b&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"location":"lab1/task5/#serverpy","title":"server.py","text":"<pre><code>import socket\nfrom urllib.parse import parse_qs\n\nclass MyHTTPServer:\n    def __init__(self, host, port):\n        self.host = host\n        self.port = port\n        self.journal = {}\n\n    def serve_forever(self):\n        sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n        sock.bind((self.host, self.port))\n        sock.listen()\n        while True:\n            client_socket, _ = sock.accept()\n            self.serve_client(client_socket)\n\n    def serve_client(self, client_socket):\n        data = client_socket.recv(4096).decode('utf-8')\n        request = self.parse_request(data)\n        response = self.handle_request(request)\n        if response:\n            client_socket.send(response.encode('utf-8'))\n            client_socket.close()\n\n    def parse_request(self, data):\n        data_split = data.split('\\r\\n')\n        print(f\"\u0420\u0430\u0437\u0434\u0435\u043b\u0435\u043d\u043d\u044b\u0435 \u0434\u0430\u043d\u043d\u044b\u0435: {data_split}\")\n        headers = data_split[0].split()\n        print(f\"\u0417\u0430\u0433\u043e\u043b\u043e\u0432\u043a\u0438: {headers}\")\n        body = data_split[-1]\n        request = dict()\n\n        if len(headers) == 3:\n            request.update({\"method\": headers[0], \"url\": headers[1], \"version\": headers[2]})\n\n            if body:\n                request.update({\"parametrs\": parse_qs(body)})\n            else:\n                request.update({\"parametrs\": {}})\n            return request\n        else:\n            raise Exception(\"\u041d\u0435\u0432\u0435\u0440\u043d\u0430\u044f \u0441\u0442\u0440\u043e\u043a\u0430 \u0437\u0430\u043f\u0440\u043e\u0441\u0430\")\n\n    def handle_request(self, request):\n        print(request)\n        response = f\"{request['version']} 200 OK\\r\\nContent-Type: text/html; charset=utf-8\\r\\n\\r\\n\"\n        if request[\"url\"] == \"/\":\n            if request[\"method\"] == \"POST\":\n                params = request[\"parametrs\"]\n                subject = params.get('subject', [''])[0]\n                grade_str = params.get('grade', [''])[0]\n\n                try:\n                    grade = int(grade_str)\n                    if subject:\n                        if subject in self.journal:\n                            self.journal[subject].append(grade)\n                        else:\n                            self.journal[subject] = [grade]\n                except ValueError:\n                    print(\"\u041d\u0435\u0432\u0435\u0440\u043d\u044b\u0439 \u0444\u043e\u0440\u043c\u0430\u0442 \u043e\u0446\u0435\u043d\u043a\u0438\")\n\n            with open('index.html', encoding='utf-8') as f:\n                response += f.read()\n                return response\n\n        if request[\"url\"] == \"/grades\":\n            response += \"&lt;html&gt;&lt;head&gt;&lt;meta charset='UTF-8'&gt;&lt;title&gt;\u0416\u0443\u0440\u043d\u0430\u043b&lt;/title&gt;&lt;/head&gt;&lt;body&gt;\"\n            for subject, grades in self.journal.items():\n                response += f\"&lt;h3&gt;{subject}:&lt;/h3&gt;\"\n                response += \"&lt;p&gt;\" + \", \".join(map(str, grades)) + \"&lt;/p&gt;\"\n            response += \"&lt;/body&gt;&lt;/html&gt;\"\n            return response\n\nif __name__ == \"__main__\":\n    host = 'localhost'\n    port = 8000\n    myserver = MyHTTPServer(host, port)\n    try:\n        myserver.serve_forever()\n    except KeyboardInterrupt:\n        pass\n</code></pre>"}]}